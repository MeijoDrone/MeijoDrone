//
//  estimate_position.cpp
//  
//
//  Created by IKEDA Takahiro on 2017/09/06.
//
//  This program estimates position and velocity from acceleration of IMU.
//  Integrated acceleration is reset by RC ARM.
//  Therefore MAVROS node has to be started.

#include "sip_mavros/estimate_position.hpp"


void Estimation::position_update(geometry_msgs::Vector3 sensor_velocity, sensor_msgs::Imu sensor_imu, double yaw, geometry_msgs::Vector3 input,geometry_msgs::Vector3 measured_position, bool refresh){
    time.update();
    double roll=0.0,pitch=0.0,y=0.0;
    Quat2RollPitchYaw(sensor_imu.orientation, roll, pitch, y);
    double sr = sin(roll);        double cr = cos(roll);
    double sp = sin(pitch);        double cp = cos(pitch);
    double sy = sin(yaw);        double cy = cos(yaw);
    geometry_msgs::Vector3 sensor_accel = sensor_imu.linear_acceleration;
    
    body_accel.x = cp *sensor_accel.x +sp*sr *sensor_accel.y +sp*cr *sensor_accel.z;
    body_accel.y =                        cr *sensor_accel.y -   sr *sensor_accel.z;
    body_accel.z =-sp *sensor_accel.x +cp*sr *sensor_accel.y +cp*cr *sensor_accel.z -gravity;
    
    measured_accel.x = cy*body_accel.x - sy*body_accel.y;
    measured_accel.y = sy*body_accel.x + cy*body_accel.y;
    measured_accel.z = body_accel.z;
    
    measured_velocity.x = cy*sensor_velocity.x - sy*sensor_velocity.y;
    measured_velocity.y = sy*sensor_velocity.x + cy*sensor_velocity.y;
    measured_velocity.z = 0;
    
    measured_x.x = measured_velocity.x; measured_x.v = measured_accel.x;
    measured_y.x = measured_velocity.y; measured_y.v = measured_accel.y;
    measured_z.x = measured_velocity.z; measured_z.v = measured_accel.z;
    
    double temp_roll  = cy*(input.x) - sy*(input.y);
    double temp_pitch = sy*(input.x) + cy*(input.y);
    double temp_throttle = input.z;
    
    kalman_x.filter(predicted_x, measured_x, temp_pitch, time.diff);
    kalman_y.filter(predicted_y, measured_y, temp_roll, time.diff);
    kalman_z.filter(predicted_z, measured_z, temp_throttle, time.diff);
    
    accel.x = predicted_x.v;
    accel.y = predicted_y.v;
    accel.z = predicted_z.v;
    
    velocity.x = predicted_x.x;
    velocity.y = predicted_y.x;
    velocity.z = predicted_z.x;
    
    position.x += velocity.x * time.diff;
    position.y += velocity.y * time.diff;
    position.z += velocity.z * time.diff;

}
